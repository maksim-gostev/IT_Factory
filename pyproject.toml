[tool.poetry]
name = "it-factory"
version = "0.1.0"
description = ""
authors = ["floof <fl0_0d@mail.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
django = "^4.2.6"
envparse = "^0.2.0"
djangorestframework = "^3.14.0"
psycopg2-binary = "^2.9.9"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
python_files = [
    "test.py",
    "test_*.py",
    "*_test.py",
]


[tool.flake8]
max-line-length = '120'
per-file-ignores = [
    '__init__.py:F401'
]
count = true
ignore = []

[tool.isort]
line_length = 120
known_first_party = ["app", "config"]
default_section = "THIRDPARTY"
skip = ["**/static/"]
skip_glob = ["**/migrations/*.py"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
multi_line_output = 3
profile = "black"

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

[[tool.mypy.overrides]]
module = ["*.migrations.*"]
# Django migrations should not produce any errors:
ignore_errors = true

[tool."mypy.plugins.django-stubs"]
django_settings_module = "config.settings.dev"

[tool.coverage.run]
include = ["app/**"]
omit = ["*migrations*", "*tests*"]
plugins = ["django_coverage_plugin"]

# Pylint section
[tool.pylint]
[tool.pylint.master]
ignore = ['CVS']
jobs = 0
persistent = ['yes']
unsafe-load-any-extension = ['no']

[tool.pylint.'MESSAGES CONTROL']
disable = ['all']
enable = ['old-ne-operator,old-octal-literal,apply-builtin,basestring-builtin,buffer-builtin,cmp-builtin,unichr-builtin,C0203,C0204,C0303,C0304,C0321,C0325,C1001,E0001,E0101,E0104,E0105,E0108,E0213,E0601,E0602,E0701,E0710,E0711,E0712,E1001-E1004,E1111,E1121,E1122,E1200,E1201,E1205,E1206,E1300-E1306,W0101,W0104,W0107,W0109,W0231,W0401']

[tool.pylint.'REPORTS']
evaluation = ['10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)']
output-format = ['text']
reports = ['no']
score = ['yes']

[tool.pylint.'REFACTORING']
max-nested-blocks = 5

[tool.pylint.'MISCELLANEOUS']
notes = ['FIXME,TODO']

[tool.pylint.'TYPECHECK']
contextmanager-decorators = ['contextlib.contextmanager']
ignore-mixin-members = ['yes']
ignore-on-opaque-inference = ['yes']
ignored-classes = ['optparse.Values,thread._local,_thread._local']
missing-member-hint = ['yes']
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.'FORMAT']
ignore-long-lines = ['^\s*(# )?<?https?://\S+>?$']
indent-after-paren = 4
indent-string = '    '

max-line-length = 120
max-module-lines = 1000
no-space-check = ['trailing-comma,dict-separator']
single-line-class-stmt = ['no']
single-line-if-stmt = ['no']

[tool.pylint.'LOGGING']
logging-modules = ['logging']

[tool.pylint.'BASIC']
argument-name-hint = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
argument-rgx = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
attr-name-hint = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
attr-rgx = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
bad-names = ['foo,bar,baz,toto,tutu,tata']
class-attribute-name-hint = ['([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$']
class-attribute-rgx = ['([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$']
class-name-hint = ['[A-Z_][a-zA-Z0-9]+$']
class-rgx = ['[A-Z_][a-zA-Z0-9]+$']
const-name-hint = ['(([A-Z_][A-Z0-9_]*)|(__.*__))$']
const-rgx = ['(([A-Z_][A-Z0-9_]*)|(__.*__))$']
docstring-min-length = -1
function-name-hint = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
function-rgx = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']

